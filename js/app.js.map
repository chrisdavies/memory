{"version":3,"sources":["mem.js","mem-format.js","mem-game.js","mem-gamestats.js","mem-generator.js","mem-views.js","ui-game.js","ui-index.js","ui-init.js","ui-win-lose.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["var mem = {};\n\n// mem.page, a naive MVC implementation\n(function () {\n  var pages = { },\n    currentPage;\n\n  mem.page = function (name, factoryMethod) {\n    pages[name] = factoryMethod;\n  };\n\n  mem.showPage = function (name, options) {\n    var page = pages[name];\n\n    if (!page) throw { err: 'Page \"' + name + '\" not found.' };\n\n    currentPage && currentPage.destroy && currentPage.destroy();\n\n    currentPage = page(options);\n\n    mem.render(currentPage.view || name + 'Template', currentPage.data || {});\n\n    currentPage.init && currentPage.init();\n  }\n})();\n","mem.format = {\n  padLeft: function (str, size, padChar) {\n    return str.length >= size ?\n      str :\n      Array(1 + size - str.length).join(padChar || '0') + str;\n  },\n\n  time: function (ms) {\n    var seconds = ms/1000,\n      minutes = seconds/60,\n      hours = minutes/60;\n\n    function formatTime(digit) {\n      return mem.format.padLeft(Math.floor(digit).toString(), 2);\n    }\n\n    return Math.floor(hours) + ':' +\n      (formatTime(minutes % 60)) + ':' +\n      (formatTime(seconds % 60));\n  }\n};\n","/*\n  mem-game contains the game logic\n*/\n(function () {\n\n  function gameBoard(tileChars) {\n    return tileChars.map(function (char) {\n      return {\n        value: char,\n        flipped: false\n      };\n    });\n  }\n\n  function Game(options) {\n    var board = gameBoard(options.tiles),\n      lives = options.lives || Math.ceil(board.length / 1.75),\n      originalLives = lives,\n      startTime = new Date(),\n      game = { },\n      previousTile;\n\n    function gameIsWon() {\n      return board.every(function (tile) { return tile.flipped; });\n    }\n\n    function gameIsLost() {\n      return lives <= 0;\n    }\n\n    function evaluateWon() {\n      if (gameIsWon()) {\n        $(game).trigger('won');\n      }\n    }\n\n    function evaluateLost() {\n      if (gameIsLost()) {\n        $(game).trigger('lost');\n      }\n    }\n\n    function onmatch() {\n      $(game).trigger('match');\n    }\n\n    function onmismatch(tile) {\n      --lives;\n      $(game).trigger('mismatch');\n      tile.flipped = (previousTile.flipped = false);\n    }\n\n    function setPreviousTile (tile) {\n      previousTile = tile;\n    }\n\n    function evaluateMatch(tile) {\n      if (previousTile.value === tile.value) {\n        onmatch(tile);\n        evaluateWon();\n      } else {\n        onmismatch(tile);\n        evaluateLost();\n      }\n\n      previousTile = undefined;\n    }\n\n    function ontileFlipped(tile) {\n      if (!previousTile) {\n        setPreviousTile(tile);\n      } else {\n        evaluateMatch(tile);\n      }\n    }\n\n    function flipTile (index) {\n      var tile = board[index];\n\n      if (!tile.flipped) {\n        tile.flipped = true;\n\n        ontileFlipped(tile);\n      }\n\n      return tile;\n    };\n\n    game.time = function() { return new Date() - startTime };\n\n    game.errors = function() { return originalLives - lives };\n\n    game.lives = function () { return lives };\n\n    game.tiles = function () { return board };\n\n    game.flipTile = flipTile;\n\n    return game;\n  }\n\n  mem.Game = Game;\n\n})();\n","mem.gameStats = function (game) {\n  var stats = {\n    lives: game.lives(),\n    errors: game.errors(),\n    time: game.time()\n  };\n\n  var errorRatio = 1 + (stats.lives / (stats.errors + 1)),\n    timeBonus = (50000) / (stats.time + 1);\n\n  stats.score = Math.ceil((2000 * errorRatio) + (2000 * timeBonus));\n\n  return stats;\n};\n","/*\n  mem-generator contains logic to generate new game boards\n*/\n(function () {\n  // An array of valid game tiles\n  var tiles = 'abcdefghijklmnop'.split('');\n\n  function gameBoard(numTiles) {\n    var arr = tiles.slice(0, numTiles);\n    return _.shuffle(arr.concat(arr));\n  }\n\n  mem.generator = {\n    easy: function () {\n      return gameBoard(9);\n    },\n\n    hard: function () {\n      return gameBoard(16);\n    }\n  }\n})();\n","mem.views = { };\n\nmem.render = function (viewName, data) {\n  $('main').replaceWith(mem.views[viewName](data));\n};\n\n(function buildViews() {\n  $('script[type=\"text/html\"]').each(function () {\n    mem.views[$(this).attr('id')] = _.template($(this).html(), null, { variable: 'data' });\n  });\n}());\n","mem.page('game', function (options) {\n  var game = new mem.Game({ tiles: mem.generator[options.difficulty]() }),\n    timer;\n\n  function refreshDetails() {\n    $('#game-details').html(mem.views.detailsTemplate(game));\n  }\n\n  function bindGameEvents() {\n    $(game).on('mismatch', function () {\n      var mismatchedTiles = $('.game-tile input:not([disabled]):checked').get();\n\n      setTimeout(function () {\n        $(mismatchedTiles).attr('checked', false);\n      }, 1000);\n    });\n\n    $(game).on('match', function () {\n      $('.game-tile input:checked').attr('disabled', true);\n    });\n\n    $(game).on('won', function () {\n      mem.showPage('win', mem.gameStats(game));\n    });\n\n    $(game).on('lost', function () {\n      mem.showPage('lose');\n    });\n  }\n\n  function bindUIEvents() {\n    // Game tile clicks game tile clicks\n    $('main').on('click', '.game-tile input', function (e) {\n      var wasChecked = $(this).is(':checked');\n\n      game.flipTile($(this).closest('.game-tile').index());\n\n      return wasChecked;\n    });\n  }\n\n  function runGameTimer() {\n    (function updateTimer() {\n      refreshDetails();\n\n      if (game) {\n        timer = window.setTimeout(updateTimer, 250);\n      }\n    })();\n  }\n\n  function initializeGame() {\n    bindGameEvents();\n    bindUIEvents();\n    runGameTimer();\n  }\n\n  function destroyGame () {\n    $(game).off();\n    game = undefined;\n\n    window.clearTimeout(timer);\n  }\n\n  return {\n    data: { game: game, difficulty: options.difficulty },\n\n    init: initializeGame,\n\n    destroy: destroyGame\n  }\n});\n","mem.page('index', function () {\n  function initGameMenu(difficulty) {\n    $('main').on('click', '.menu-option.' + difficulty + '-game', function(e) {\n      mem.showPage('game', { difficulty: difficulty });\n      e.stopImmediatePropagation();\n      return false;\n    });\n  }\n\n  return {\n    init: function () {\n      initGameMenu('easy');\n      initGameMenu('hard');\n    }\n  }\n});\n","$(function () {\n  mem.showPage('index');\n});\n","(function () {\n  function winLoseController (data) {\n    return {\n      data: data,\n      \n      init: function () {\n        $('main').on('click', '.index-link', function (e) {\n          mem.showPage('index');\n          return false;\n        });\n      }\n    }\n  }\n\n  mem.page('win', winLoseController);\n  mem.page('lose', winLoseController);\n})();\n"],"sourceRoot":"/source/"}